-- File auto generated by purescript-bridge! --
module Types where

import Prelude

import Data.Argonaut.Aeson.Decode.Generic (class DecodeAeson, genericDecodeAeson)
import Data.Argonaut.Aeson.Encode.Generic (class EncodeAeson, genericEncodeAeson)
import Data.Argonaut.Aeson.Options (defaultOptions) as Argonaut
import Data.Argonaut.Decode.Class (class DecodeJson, class DecodeJsonField, decodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson, encodeJson)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Show.Generic (genericShow)
import Foreign.Object (Object)
import Type.Proxy (Proxy(Proxy))


newtype Baz = Baz { _bazMessage :: String }

instance Show Baz where
  show a = genericShow a

derive instance Eq Baz

derive instance Ord Baz

derive instance Newtype Baz _

derive instance Generic Baz _

instance EncodeJson Baz where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions

instance DecodeJson Baz where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
--------------------------------------------------------------------------------




_Baz :: Iso' Baz {_bazMessage :: String}
_Baz = _Newtype
bazMessage :: Lens' Baz String
bazMessage = _Newtype <<< prop (Proxy :: _"_bazMessage")
--------------------------------------------------------------------------------


newtype Foo = Foo
  { _fooMessage :: String
  , _fooNumber :: Int
  , _fooList :: Array Int
  , _fooMap :: Object Int
  , _fooBaz :: Baz
  }

instance Show Foo where
  show a = genericShow a

derive instance Eq Foo

derive instance Ord Foo

derive instance Newtype Foo _

derive instance Generic Foo _

instance EncodeJson Foo where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions

instance DecodeJson Foo where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
--------------------------------------------------------------------------------




_Foo :: Iso' Foo {_fooMessage :: String, _fooNumber :: Int, _fooList :: Array Int, _fooMap :: Object Int, _fooBaz :: Baz}
_Foo = _Newtype
fooMessage :: Lens' Foo String
fooMessage = _Newtype <<< prop (Proxy :: _"_fooMessage")
fooNumber :: Lens' Foo Int
fooNumber = _Newtype <<< prop (Proxy :: _"_fooNumber")
fooList :: Lens' Foo (Array Int)
fooList = _Newtype <<< prop (Proxy :: _"_fooList")
fooMap :: Lens' Foo (Object Int)
fooMap = _Newtype <<< prop (Proxy :: _"_fooMap")
fooBaz :: Lens' Foo Baz
fooBaz = _Newtype <<< prop (Proxy :: _"_fooBaz")
--------------------------------------------------------------------------------


newtype BarSimple a = BarSimple a

instance (Show a) => Show (BarSimple a) where
  show a = genericShow a

derive instance (Eq a) => Eq (BarSimple a)

derive instance (Ord a) => Ord (BarSimple a)

derive instance Newtype (BarSimple a) _

derive instance Generic (BarSimple a) _

instance (EncodeJson a) => EncodeJson (BarSimple a) where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions

instance (DecodeJson a) => DecodeJson (BarSimple a) where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
--------------------------------------------------------------------------------




_BarSimple :: forall a. Iso' (BarSimple a) a
_BarSimple = _Newtype
